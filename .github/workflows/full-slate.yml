name: Full Slate

on:
  workflow_dispatch:
    inputs:
      season:
        description: "Season (e.g., 2025)"
        required: false
        default: "2025"
      date:
        description: "Slate date (YYYY-MM-DD) or blank for latest"
        required: false
        default: ""

concurrency:
  group: full-slate-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PYTHONDONTWRITEBYTECODE: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      APISPORTS_KEY: ${{ secrets.APISPORTS_KEY }}
      ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
      ESPN_COOKIE: ${{ secrets.ESPN_COOKIE }}
      MSF_KEY: ${{ secrets.MSF_KEY }}
      MSF_PASSWORD: ${{ secrets.MSF_PASSWORD }}
      NFLGSIS_USERNAME: ${{ secrets.NFLGSIS_USERNAME }}
      NFLGSIS_PASSWORD: ${{ secrets.NFLGSIS_PASSWORD }}
      SEASON: ${{ github.event.inputs.season }}
      SLATE_DATE: ${{ github.event.inputs.date }}

    steps:
      # ----------------------------
      # 0. Checkout + Python setup
      # ----------------------------
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (core + HTML parsers)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # if metrics_ready.py uses yaml or rapidfuzz etc and it's NOT in requirements.txt,
          # make sure requirements.txt gets updated in repo. don't pip install ad-hoc here
          # unless you're intentionally hot-patching.

      # ----------------------------------------
      # 1. Pull SharpFootball team metrics
      # ----------------------------------------
      # scrapes pace / neutral pace / box rates / tendencies / coverage / etc.
      # outputs CSVs into data/ (e.g. sharp_pace_*.csv, sharp_coverage_*.csv ...)
      - name: Pull SharpFootball metrics
        run: |
          python scripts/providers/sharpfootball_pull.py \
            --season "${SEASON}" \
            --dump-html

      # ----------------------------------------
      # 2. Build depth / roles (Ourlads)
      # ----------------------------------------
      # This should write depth/role info like roles_ourlads.csv
      # plus whatever merged roles file player_form expects.
      - name: Build depth / roles (Ourlads)
        run: |
          python scripts/providers/ourlads_depth.py \
            --season "${SEASON}"

      # ----------------------------------------
      # 3. Build opponent map from props
      # ----------------------------------------
      # Uses sportsbook / props board scrape to infer each player's opponent
      # for the current slate, writes data/opponent_map_from_props.csv
      - name: Build opponent map from props
        run: |
          python scripts/build_opponent_map_from_props.py \
            --season "${SEASON}" \
            --date "${SLATE_DATE}"

      # ----------------------------------------
      # 4. Build weather for this slate
      # ----------------------------------------
      # This step should create data/weather_week.csv (or weather_slate.csv)
      # using stadium/city mapping + forecast source.
      # NOTE: if you're using an API key like OPENWEATHER_API_KEY, add it to secrets
      # and expose it here in env.
      - name: Build weather (per-game forecast)
        env:
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        run: |
          python scripts/build_weather_week.py \
            --season "${SEASON}" \
            --date "${SLATE_DATE}"

      # ----------------------------------------
      # 5. Build QB run/scramble metrics
      # ----------------------------------------
      # Generates qb_designed_runs.csv and qb_scramble_rates.csv from nflverse PBP.
      # You already added row-count guards so it fails if data is totally empty.
      - name: Build QB scramble / designed-run metrics
        run: |
          python scripts/build_qb_run_metrics.py \
            --season "${SEASON}"

      # ----------------------------------------
      # 6. Build team_form.csv
      # ----------------------------------------
      # make_team_form.py is responsible for merging:
      # - SharpFootball (pace, neutral_pace, coverage tendencies, box rate, etc.)
      # - nflverse / nflreadr data (EPA, PROE, etc.)
      # and writing data/team_form.csv
      - name: Build team_form
        run: |
          python scripts/make_team_form.py \
            --season "${SEASON}"

      # ----------------------------------------
      # 7. Build player_form + player_form_consensus
      # ----------------------------------------
      # make_player_form.py should:
      # - merge roles_ourlads.csv
      # - merge opponent_map_from_props.csv (and schedule fallback if you've added it)
      # - canonicalize player names (strip middle initials, normalize "J.Fields" -> "Justin Fields")
      # - output data/player_form.csv and data/player_form_consensus.csv
      - name: Build player_form / consensus
        run: |
          python scripts/make_player_form.py \
            --season "${SEASON}" \
            --date "${SLATE_DATE}"

      # ----------------------------------------
      # 8. Run pipeline (full metrics / slipgen prep)
      # ----------------------------------------
      # This stage assembles all derived features that pricing depends on.
      # After this, the repo should have:
      # - fully enriched per-player/per-team matchup features
      # - slipgen output
      - name: Run pipeline (full metrics + slipgen)
        run: |
          python scripts/make_metrics.py \
            --season "${SEASON}" \
            --mode full \
            --date "${SLATE_DATE}"
          python scripts/slipgen.py \
            --season "${SEASON}" \
            --date "${SLATE_DATE}"

      # ----------------------------------------
      # 9. metrics_ready sanity gate
      # ----------------------------------------
      # HARD FAIL GATE.
      # metrics_ready.py should:
      # - confirm required CSVs exist and are non-empty:
      #   data/team_form.csv
      #   data/player_form.csv
      #   data/player_form_consensus.csv
      #   data/qb_designed_runs.csv
      #   data/qb_scramble_rates.csv
      #   data/weather_week.csv   (or whatever weather file you write)
      #   any other must-have inputs
      # If anything is missing/empty -> raise RuntimeError -> nonzero exit -> job stops here.
      - name: Validate metrics_ready (must pass before pricing)
        run: |
          python scripts/metrics_ready.py \
            --season "${SEASON}" \
            --date "${SLATE_DATE}"

      # ----------------------------------------
      # 10. Elite model | Run pricing
      # ----------------------------------------
      # ONLY after the sanity gate passes do we hit pricing.
      # This is where Odds API credits and sportsbook calls happen.
      # This step should generate final projection tables and bet slips.
      - name: Elite model | Run pricing
        env:
          ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
        run: |
          python scripts/make_metrics.py \
            --season "${SEASON}" \
            --mode pricing \
            --date "${SLATE_DATE}"
          python scripts/pricing.py \
            --season "${SEASON}" \
            --date "${SLATE_DATE}"

      # ----------------------------------------
      # 11. Upload artifacts
      # ----------------------------------------
      # Always upload every CSV and output we care about,
      # even if an earlier step failed. This lets us inspect
      # partials like opponent_map_from_props.csv, player_form.csv, etc.
      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run_${{ github.run_id }}
          path: |
            outputs/**
            data/*.csv
            data/_debug/**
            data/_sharp_dump_*.html
          if-no-files-found: warn
          retention-days: 7
