name: Full Slate

on:
  workflow_dispatch:
    inputs:
      season:
        description: "Season (e.g., 2025)"
        required: false
        default: "2025"
      date:
        description: "Slate date (YYYY-MM-DD) or blank for latest"
        required: false
        default: ""

concurrency:
  group: full-slate-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PYTHONDONTWRITEBYTECODE: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      APISPORTS_KEY: ${{ secrets.APISPORTS_KEY }}
      ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
      ESPN_COOKIE: ${{ secrets.ESPN_COOKIE }}
      MSF_KEY: ${{ secrets.MSF_KEY }}
      MSF_PASSWORD: ${{ secrets.MSF_PASSWORD }}
      NFLGSIS_USERNAME: ${{ secrets.NFLGSIS_USERNAME }}
      NFLGSIS_PASSWORD: ${{ secrets.NFLGSIS_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (core + HTML parsers)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # HTML parser dependencies are pinned in requirements.txt; no blanket upgrades here

      # ----- your other provider pulls (keep as-is) -----
      # Example:
      # - name: GSIS (nflverse) aggregates
      #   run: python scripts/providers/gsis_pull.py "${{ github.event.inputs.season }}"

      # >>> NEW/UPDATED: Sharp Football team metrics must run BEFORE make_team_form
      - name: Sharp Football team metrics
        run: |
          python scripts/providers/sharpfootball_pull.py --season "${{ github.event.inputs.season }}" --dump-html

      # ----- your remaining providers / lines / odds pulls (keep as-is) -----

      # >>> make sure the team form builder comes AFTER Sharp so it can use the merged fallback
      - name: Build Game Lines
        run: python scripts/build_game_lines_from_schedule.py --season 2025

      - name: Fetch Odds (Odds API)
        env:
          ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
        run: python scripts/fetch_game_lines_oddsapi.py
        continue-on-error: true  # donâ€™t fail the whole run if the API is down/rate-limited

      # ---------------------------------------------------------------------
      # ðŸ§  NEW SECTION: Data Builders + Opponent Merge + Audit
      # ---------------------------------------------------------------------

      - name: Install build+audit deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas pyyaml

      - name: Ensure folders
        run: |
          mkdir -p data
          mkdir -p outputs

      - name: Build data inputs
        run: |
          python scripts/build/build_cb_coverage_team.py || true
          python scripts/build/build_cb_coverage_player.py || true
          python scripts/build/build_weather_week.py || true
          python scripts/build/build_injuries_weekly.py || true
          python scripts/build/build_qb_run_metrics.py || true
          python scripts/build/build_wr_cb_exposure.py || true
          python scripts/build/build_play_volume_splits.py || true
          python scripts/build/build_volatility_widening.py || true
          python scripts/build/build_run_pass_funnel.py || true
          python scripts/build/build_coverage_penalties.py || true
          python scripts/build/build_script_escalators.py || true
          python scripts/build/build_opponent_map_from_props.py || true

      - name: Merge opponents into player_form_consensus (fixes "ALL")
        run: |
          if [[ -f data/opponent_map_from_props.csv && -f data/player_form_consensus.csv ]]; then
            python scripts/util/merge_opponent_into_player_form.py
          else
            echo "Skipping merge: missing data/opponent_map_from_props.csv or data/player_form_consensus.csv"
          fi

      - name: Build unified matchup features (optional)
        run: |
          if [[ -f model/features/build.py ]]; then
            python - << 'PY'
            from model.features.build import build_matchup_frame
            df = build_matchup_frame()
            df.to_csv('outputs/matchup_features.csv', index=False)
            print(df.shape, '-> outputs/matchup_features.csv')
            PY
          else
            echo "Skipping matchup_features: model/features/build.py not present"
          fi

      - name: Repo Audit (syntax/import/yaml/data schema)
        run: |
          python scripts/util/audit_repo.py | tee audit_report.txt

      # ---------------------------------------------------------------------
      # --- ELITE MODEL: install + run + upload artifacts ---
      # ---------------------------------------------------------------------
      - name: Elite model | Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyyaml

      - name: Elite model | Run pricing
        run: |
          python -m model.cli --config config.yaml
        env:
          PYTHONUNBUFFERED: "1"

      - name: Elite model | Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: elite-model-outputs-${{ github.run_id }}
          path: |
            outputs/full_model_elite.csv
            outputs/bet_slip_elite_green.csv
          if-no-files-found: warn
          retention-days: 7
      # --- /ELITE MODEL ---

      - name: Run pipeline
        run: |
          python -m engine --season "${{ github.event.inputs.season }}" --date "" --bookmakers=""

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run_${{ github.run_id }}
          path: |
            outputs/**
            data/*.csv
            data/_sharp_dump_*.html
            audit_report.txt
          if-no-files-found: warn
