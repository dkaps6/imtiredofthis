name: Full Slate

on:
  workflow_dispatch:
    inputs:
      season:
        description: "Season (e.g., 2025)"
        required: false
        default: "2025"
      date:
        description: "Slate date (YYYY-MM-DD) or blank for latest"
        required: false
        default: ""

concurrency:
  group: full-slate-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # ensure python can import our repo modules
      PYTHONPATH: ${{ github.workspace }}
      PYTHONDONTWRITEBYTECODE: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      APISPORTS_KEY: ${{ secrets.APISPORTS_KEY }}
      ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
      ESPN_COOKIE: ${{ secrets.ESPN_COOKIE }}
      MSF_KEY: ${{ secrets.MSF_KEY }}
      MSF_PASSWORD: ${{ secrets.MSF_PASSWORD }}
      NFLGSIS_USERNAME: ${{ secrets.NFLGSIS_USERNAME }}
      NFLGSIS_PASSWORD: ${{ secrets.NFLGSIS_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      # --------------------------
      # Providers / schedule first
      # --------------------------
      - name: Build schedule/opponent map (nfl_data_py)
        shell: bash
        timeout-minutes: 5
        run: |
          set -euo pipefail
          python scripts/build/build_opponent_map_from_props.py "${{ github.event.inputs.season }}"

      - name: Build game lines from schedule
        shell: bash
        timeout-minutes: 5
        run: |
          set -euo pipefail
          python scripts/build_game_lines_from_schedule.py --season "${{ github.event.inputs.season }}"

      # -------------------
      # Player form + merge
      # -------------------
      - name: Build/Enrich player form (inline opponent merge)
        shell: bash
        timeout-minutes: 10
        run: |
          set -euo pipefail
          python scripts/make_player_form.py

      # ---------------------------------------------
      # nflverse-derived builders (required)
      # ---------------------------------------------
      - name: Build QB run metrics
        shell: bash
        timeout-minutes: 8
        run: |
          set -euo pipefail
          python scripts/build/build_qb_run_metrics.py

      - name: Build play-volume splits
        shell: bash
        timeout-minutes: 8
        run: |
          set -euo pipefail
          python scripts/build/build_play_volume_splits.py

      - name: Build volatility widening
        shell: bash
        timeout-minutes: 8
        run: |
          set -euo pipefail
          python scripts/build/build_volatility_widening.py

      - name: Build run/pass funnel
        shell: bash
        timeout-minutes: 8
        run: |
          set -euo pipefail
          python scripts/build/build_run_pass_funnel.py

      - name: Build script escalators
        shell: bash
        timeout-minutes: 8
        run: |
          set -euo pipefail
          python scripts/build/build_script_escalators.py

      - name: Build coverage penalties
        shell: bash
        timeout-minutes: 8
        run: |
          set -euo pipefail
          python scripts/build/build_coverage_penalties.py

      # -------------------------------------------
      # Coverage / alignment (required)
      # -------------------------------------------
      - name: Sharp coverage (team)
        shell: bash
        timeout-minutes: 5
        run: |
          set -euo pipefail
          python scripts/build/build_cb_coverage_team.py

      - name: WR/CB exposure (player)
        shell: bash
        timeout-minutes: 8
        run: |
          set -euo pipefail
          python scripts/build/build_cb_coverage_player.py

      # -------------------------------------------
      # Injuries / Weather (required)
      # -------------------------------------------
      - name: Weekly injuries
        shell: bash
        timeout-minutes: 5
        run: |
          set -euo pipefail
          python scripts/build/build_injuries_weekly.py

      - name: Weather (NWS via schedule)
        shell: bash
        timeout-minutes: 6
        run: |
          set -euo pipefail
          python scripts/build/build_weather_week.py "${{ github.event.inputs.season }}"

      # --------------------------------------------------
      # Sanity gate â€“ must pass before paid calls/pricing
      # --------------------------------------------------
      - name: Sanity gate (required inputs present & non-empty)
        shell: bash
        timeout-minutes: 3
        run: |
          set -euo pipefail
          python scripts/metrics_ready.py

      # ----------------------------------------
      # Paid/external calls AFTER sanity gate
      # ----------------------------------------
      - name: Fetch Odds (Odds API)
        if: ${{ success() }}
        shell: bash
        timeout-minutes: 4
        env:
          ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
        run: |
          set -euo pipefail
          python scripts/fetch_game_lines_oddsapi.py

      # -------------------------
      # Model / Engine execution
      # -------------------------
      - name: Elite model | Install deps
        if: ${{ success() }}
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyyaml

      - name: Elite model | Run pricing
        if: ${{ success() }}
        shell: bash
        timeout-minutes: 10
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          set -euo pipefail
          python -m model.cli --config config.yaml

      - name: Run pipeline
        if: ${{ success() }}
        shell: bash
        timeout-minutes: 10
        run: |
          set -euo pipefail
          python -m engine --season "${{ github.event.inputs.season }}" --date "${{ github.event.inputs.date }}" --bookmakers=""

      # -------------
      # Upload stuff
      # -------------
      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run_${{ github.run_id }}
          path: |
            outputs/**
            data/*.csv
            data/_debug/**
          if-no-files-found: warn
