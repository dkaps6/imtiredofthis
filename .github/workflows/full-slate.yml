name: Full Slate

on:
  workflow_dispatch:
    inputs:
      season:
        description: "Season (e.g., 2025)"
        required: false
        default: "2025"
      date:
        description: "Slate date (YYYY-MM-DD) or blank for latest"
        required: false
        default: ""

concurrency:
  group: full-slate-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (core + HTML parsers)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Prepare workspace directories
        run: |
          mkdir -p data data/_debug data/raw data/intermediate data/final outputs logs artifacts

  gather_inputs:
    runs-on: ubuntu-latest
    needs: setup
    env:
      PYTHONPATH: ${{ github.workspace }}
      PYTHONDONTWRITEBYTECODE: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"

      APISPORTS_KEY: ${{ secrets.APISPORTS_KEY }}
      ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
      OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
      MSF_KEY: ${{ secrets.MSF_KEY }}
      MSF_PASSWORD: ${{ secrets.MSF_PASSWORD }}
      NFLGSIS_USERNAME: ${{ secrets.NFLGSIS_USERNAME }}
      NFLGSIS_PASSWORD: ${{ secrets.NFLGSIS_PASSWORD }}

      SEASON: ${{ github.event.inputs.season }}
      SLATE_DATE: ${{ github.event.inputs.date }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (core + HTML parsers)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Pull Sharp / pace / coverage / tendencies
        run: |
          mkdir -p data
          python scripts/providers/sharpfootball_pull.py --season "$SEASON" --dump-html
          # MUST emit data/sharp_team_form.csv with pace, coverage, tendencies, neutral_pace inputs

      - name: Build depth / roles (Ourlads)
        run: |
          mkdir -p data
          python scripts/providers/ourlads_depth.py
          # MUST emit data/roles_ourlads.csv (player -> team -> WR1/WR2/Slot/RB1/etc.)

      - name: Build weather for slate
        run: |
          mkdir -p data
          python scripts/build/build_weather_week.py "$SEASON" "$SLATE_DATE" || true
          if [ ! -s data/weather_week.csv ]; then
            echo "game_id,tempF,windMph,precipProb" > data/weather_week.csv
          fi
          # must emit data/weather_week.csv

      - name: Build QB scramble / designed-run metrics
        run: |
          mkdir -p data
          python scripts/build/build_qb_run_metrics.py "$SEASON"
          # must emit data/qb_designed_runs.csv and data/qb_scramble_rates.csv

      - name: Upload raw input artifacts
        uses: actions/upload-artifact@v4
        with:
          name: step1-inputs
          path: data/*
          if-no-files-found: warn

  build_forms:
    runs-on: ubuntu-latest
    needs: gather_inputs
    env:
      PYTHONPATH: ${{ github.workspace }}
      PYTHONDONTWRITEBYTECODE: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"

      APISPORTS_KEY: ${{ secrets.APISPORTS_KEY }}
      ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
      OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
      MSF_KEY: ${{ secrets.MSF_KEY }}
      MSF_PASSWORD: ${{ secrets.MSF_PASSWORD }}
      NFLGSIS_USERNAME: ${{ secrets.NFLGSIS_USERNAME }}
      NFLGSIS_PASSWORD: ${{ secrets.NFLGSIS_PASSWORD }}

      SEASON: ${{ github.event.inputs.season }}
      SLATE_DATE: ${{ github.event.inputs.date }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (core + HTML parsers)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Build team_form
        run: |
          mkdir -p data
          python scripts/make_team_form.py "$SEASON"
          # must emit data/team_form.csv
          # make_team_form.py assumes sharpfootball_pull already wrote neutral_pace data

      - name: Build opponent map from props
        run: |
          mkdir -p data
          python scripts/build/build_opponent_map_from_props.py "$SEASON" "$SLATE_DATE"
          # must emit data/opponent_map_from_props.csv
          # this step is allowed to exit(1) if we cannot attach opponents.
          # DO NOT wrap this in `|| true`. DO NOT swallow RuntimeError.

      - name: Build player_form and consensus
        run: |
          mkdir -p data
          python scripts/make_player_form.py "$SEASON" "$SLATE_DATE"
          # must emit data/player_form.csv and data/player_form_consensus.csv
          # make_player_form.py is responsible for canonicalizing names, merging roles_ourlads.csv, and attaching opponent per player.

  run_pipeline:
    runs-on: ubuntu-latest
    needs: build_forms
    env:
      PYTHONPATH: ${{ github.workspace }}
      PYTHONDONTWRITEBYTECODE: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"

      APISPORTS_KEY: ${{ secrets.APISPORTS_KEY }}
      ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
      OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
      MSF_KEY: ${{ secrets.MSF_KEY }}
      MSF_PASSWORD: ${{ secrets.MSF_PASSWORD }}
      NFLGSIS_USERNAME: ${{ secrets.NFLGSIS_USERNAME }}
      NFLGSIS_PASSWORD: ${{ secrets.NFLGSIS_PASSWORD }}

      SEASON: ${{ github.event.inputs.season }}
      SLATE_DATE: ${{ github.event.inputs.date }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (core + HTML parsers)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Run pipeline (full metrics + slipgen)
        run: |
          python scripts/make_metrics.py --mode full "$SEASON" "$SLATE_DATE"
          python scripts/slipgen.py "$SEASON" "$SLATE_DATE"

  metrics_ready:
    runs-on: ubuntu-latest
    needs: run_pipeline
    env:
      PYTHONPATH: ${{ github.workspace }}
      PYTHONDONTWRITEBYTECODE: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"

      APISPORTS_KEY: ${{ secrets.APISPORTS_KEY }}
      ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
      OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
      MSF_KEY: ${{ secrets.MSF_KEY }}
      MSF_PASSWORD: ${{ secrets.MSF_PASSWORD }}
      NFLGSIS_USERNAME: ${{ secrets.NFLGSIS_USERNAME }}
      NFLGSIS_PASSWORD: ${{ secrets.NFLGSIS_PASSWORD }}

      SEASON: ${{ github.event.inputs.season }}
      SLATE_DATE: ${{ github.event.inputs.date }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (core + HTML parsers)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Validate metrics_ready (must pass before pricing)
        run: |
          python scripts/metrics_ready.py "$SEASON" "$SLATE_DATE"

  pricing:
    runs-on: ubuntu-latest
    needs: metrics_ready
    if: ${{ needs.metrics_ready.result == 'success' }}
    env:
      PYTHONPATH: ${{ github.workspace }}
      PYTHONDONTWRITEBYTECODE: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"

      APISPORTS_KEY: ${{ secrets.APISPORTS_KEY }}
      ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
      OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
      MSF_KEY: ${{ secrets.MSF_KEY }}
      MSF_PASSWORD: ${{ secrets.MSF_PASSWORD }}
      NFLGSIS_USERNAME: ${{ secrets.NFLGSIS_USERNAME }}
      NFLGSIS_PASSWORD: ${{ secrets.NFLGSIS_PASSWORD }}

      SEASON: ${{ github.event.inputs.season }}
      SLATE_DATE: ${{ github.event.inputs.date }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (core + HTML parsers)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Elite model | Run pricing
        run: |
          python scripts/pricing.py "$SEASON" "$SLATE_DATE"

  upload_artifacts:
    runs-on: ubuntu-latest
    needs:
      - gather_inputs
      - build_forms
      - run_pipeline
      - metrics_ready
      - pricing
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Bundle run artifacts
        run: |
          mkdir -p artifacts
          cp -r data artifacts/data || true
          cp -r outputs artifacts/outputs || true
          cp -r logs artifacts/logs || true

      - name: Upload full debug bundle
        uses: actions/upload-artifact@v4
        with:
          name: full-debug-bundle
          path: artifacts
          if-no-files-found: warn
